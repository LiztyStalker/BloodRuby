//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;

public class BayonetChargeBuffDataClass : BuffDataClass, IBullet
{
//	[SerializeField] float m_areaRange;
//	[SerializeField] float m_time;
	[SerializeField] int m_damage;
	[SerializeField] BuffDataClass m_buffData;
	[SerializeField] ParticleSystem m_hitParticle;
	//[SerializeField] float m_moveSpeed;


	ICharacterInterface character { get { return ownerCharacter; } }
	public UICharacterClass characterCtrler { get { return ownerCharacter.characterCtrler; } }
    public Type type { get { return this.GetType(); } }
	public bool isPenetrate{ get { return false; } set{ }}
	public int damage{ get { return m_damage; } set{ }}
	public bool isInTrench{get{return true;}}
	public Sprite weaponSprite{ get { return m_icon; } }

//	void Awake(){
//		buffStateSet(TYPE_BUFF_STATE_ACT.ATTACK);
//	}
	
	
	protected override void Start(){
		//Debug.Log ("Start : " + GetInstanceID());
		GetComponent<CircleCollider2D>().radius = range;
//		startCoroutine (m_time);
		base.Start();
	}

	public override void buffStart (ICharacterInterface ownerCharacter, ICharacterInterface actCharacter)
	{
		base.buffStart (ownerCharacter, actCharacter);
//		actCharacter.addState.isNotAttack = true;
		addValueState (this);
	}
	
	public override bool buffEnd ()
	{
		returnValueState (this);
//		actCharacter.addState.isNotAttack = false;
		ownerCharacter.resetSkillCoolTime(1);
		ownerCharacter.mosData.resetToggle ();
		return base.buffEnd ();
	}



	void OnTriggerEnter2D(Collider2D col){
		//적 충돌시 데미지
		//
//		if (col.GetInstanceID () == transform.parent.GetInstanceID ()) {
//			Debug.Log("플레이어");
//			return;
//		}

		if(PrepClass.isCharacterTag(col.tag)){
			ICharacterInterface enemyCharacter = col.GetComponent<ICharacterInterface> ();
			if (enemyCharacter != ownerCharacter) {
				if (enemyCharacter.team != ownerCharacter.team) {
					if (!enemyCharacter.isDead) {
						//1회 한정 충돌
						if (enemyCharacter.hitAction (ownerCharacter.team, this)) {
							//Debug.Log("충돌 : " + m_damage);
						}
						ownerCharacter.buffAdd (m_buffData, ownerCharacter, ownerCharacter);
						ownerCharacter.resetSkillCoolTime (1, 0f);


						if (m_hitParticle != null)
							Instantiate (m_hitParticle, col.transform.position, Quaternion.identity);


						buffEnd ();
					}
				}
			}
		}


	}


	public override bool useBuff (ICharacterInterface useActCharacter)
	{
		return buffEnd ();
	}

	void OnDrawGizmos(){
		Gizmos.color = Color.yellow;
		Gizmos.DrawWireSphere  (transform.position, range);
	}

}



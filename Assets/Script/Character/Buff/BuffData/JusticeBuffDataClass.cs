//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public class JusticeBuffDataClass : BuffDataClass
{
	[SerializeField] BuffDataClass m_buffData;
	[SerializeField] int m_healthPerSecond;
//	[SerializeField] float m_radius;

	float radius;

	protected override void Start(){
		setBuffLoopDelegate (healing);
		radius = range;
		debufAction ();
		base.Start ();
	}
	

	void healing(){
		actCharacter.addHealth ((int)((float)m_healthPerSecond * PrepClass.c_timeGap), ownerCharacter);
	} 

	void debufAction(){

		RaycastHit2D[] hits = null;

		if (radius > 0f) {
			hits = Physics2D.CircleCastAll(ownerCharacter.transform.position, radius, Vector2.zero);		
		}
		else if (radius <= 0f){
			hits = Physics2D.BoxCastAll(ownerCharacter.transform.position, new Vector2(2 * Camera.main.orthographicSize * Camera.main.aspect, 2 * Camera.main.orthographicSize), 0f, Vector2.zero);
		}

		if (hits != null) {
			foreach (RaycastHit2D hit in hits) {

				Collider2D col = hit.collider;

				if (PrepClass.isCharacterTag (col.tag)) {

					//근처 캐릭터 가져오기
					ICharacterInterface neighbourCharacter = col.GetComponent<ICharacterInterface> ();

					if(neighbourCharacter.team != ownerCharacter.team){
						if (!neighbourCharacter.isDead) {
							neighbourCharacter.buffAdd (m_buffData, ownerCharacter, neighbourCharacter);
						}
					}
				}
			}
		}



	}

	void OnDrawGizmos(){
		Gizmos.color = Color.yellow;
		Gizmos.DrawWireSphere  (transform.position, range);
	}

}



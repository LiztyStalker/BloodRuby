//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;

public class CharacterFrameClass : MonoBehaviour
{
	[SerializeField] SpriteRenderer m_teamMarker;
	[SerializeField] SpriteRenderer m_character;
	[SerializeField] SpriteRenderer m_weapon;
    [SerializeField] Transform m_hpBar;
	[SerializeField] GUIText m_nameText;
	[SerializeField] GUIText m_nameShadowText;
//	[SerializeField] string m_weaponName;

    Vector3 vecAngle = Vector3.zero;
	Vector3 barScale = Vector3.zero;

	Coroutine coroutine_hpBar;
	float m_time = 0f;

	public string characterName {get{return m_nameText.text;}}
    public float angle { get { return m_character.transform.eulerAngles.z; } }
	public Sprite mainSprite{get{return m_character.sprite;}}

    /// <summary>
    /// 각도 정하기
    /// </summary>
    /// <param name="angle"></param>
    public void setAngle(float angle)
    {
		//Debug.Log ("angle : " + angle);
		vecAngle.Set(0f, 0f, angle);
		m_character.transform.eulerAngles = vecAngle;
    }

	void OnEnable(){
		if(m_hpBar != null && barScale == Vector3.zero) {
			barScale.Set (m_hpBar.localScale.x, m_hpBar.localScale.y, 1f);
		}

		if (tag == "ActObject") {
			if(m_hpBar != null)
				m_hpBar.parent.gameObject.SetActive (false);
		}

		if(m_nameText != null)
			m_nameText.transform.SetParent (null);
		
		if(m_nameShadowText != null)
			m_nameShadowText.gameObject.SetActive (false);

		//Debug.Log ("barScale : " + barScale);
	}

	void Update(){
		if (m_nameText != null) {
			Vector2 pos = Camera.main.WorldToViewportPoint (transform.position);
			m_nameText.transform.position = (Vector3)pos;
		}
	}

	/// <summary>
	/// 캐릭터 스프라이트 붙이기
	/// </summary>
	/// <param name="character">Character.</param>
	/// <param name="equips">Equips.</param>
//	public void setSprite(CharacterCommonClass character){ //Sprite character, IEquipmentInterface[] equips){
//
//		m_character.gameObject.SetActive (true);
//		//m_weapon.gameObject.SetActive (true);
//
//		m_character.sprite = character.mosData.mosData.character;
//		setColor (character.team);
//
//
//		
//	}

	public void setSkeletonAnimation(TYPE_TEAM team, MOSSkeletonClass MOSSkeleton){
		MOSSkeleton.transform.SetParent (m_character.transform);
		setColor (team);

		if (m_nameText != null) {
			m_nameText.text = GetComponent<ICharacterInterface>().playerName;
			m_nameShadowText.text = m_nameText.text;

			if (GetComponent<ICharacterInterface> ().team == TYPE_TEAM.TEAM_0)
				m_nameText.color = Color.cyan;
			else
				m_nameText.color = PrepClass.getFlagColor (GetComponent<ICharacterInterface>().team);
		} else
			m_nameText.gameObject.SetActive (false);
	}


	/// <summary>
	/// 팀 색 정하기
	/// </summary>
	/// <param name="team">Team.</param>
	public void setColor(TYPE_TEAM team){
		if (team != TYPE_TEAM.NONE) {
			if (m_teamMarker != null)
				m_teamMarker.color = PrepClass.getFlagColor (team);
			else
				m_character.color = PrepClass.getFlagColor (team);
		}

	}

	/// <summary>
	/// 무기 이미지 바꾸기 - 사용하지 않음
	/// </summary>
	/// <param name="weaponSprite">Weapon sprite.</param>
//	public void setWeaponSprite(Sprite weaponSprite){
//		//m_weapon.sprite = weaponSprite;
//	}

    /// <summary>
    /// 체력바 보이기
    /// </summary>
    /// <param name="min"></param>
    /// <param name="max"></param>
    public void setHPBar(int min, int max)
    {

		if (m_hpBar != null) {
			if (tag == "ActObject") {
				if (coroutine_hpBar == null)
					coroutine_hpBar = StartCoroutine (hpBarCoroutine ());
				m_time = 1f;
			}
		
			float rate = PrepClass.ratioCalculator (min, max);
			m_hpBar.localScale = new Vector2 (barScale.x * rate, barScale.y);
		}
		//Debug.Log ("barScale : " + barScale);

    }

	/// <summary>
	/// 팀마커 보이기
	/// </summary>
	/// <param name="isView">If set to <c>true</c> is view.</param>
	public void teamMarkerView(bool isView){
//		Debug.Log ("teamMaker : " + isView + " " + m_character);
		m_teamMarker.gameObject.SetActive (isView);
		m_hpBar.parent.gameObject.SetActive (isView);
		m_nameText.gameObject.SetActive (isView);
//		m_nameShadowText.gameObject.SetActive (isView);
	}

	IEnumerator hpBarCoroutine(){

		m_hpBar.parent.gameObject.SetActive (true);

		while (m_time > 0f) {
			m_time -= PrepClass.c_timeGap;
			yield return new WaitForSeconds (PrepClass.c_timeGap);
		}

		coroutine_hpBar = null;
		m_hpBar.parent.gameObject.SetActive (false);
	}

	void OnDisable(){
		if (coroutine_hpBar != null)
			StopCoroutine (coroutine_hpBar);
		coroutine_hpBar = null;

		if(m_nameText != null)
			Destroy (m_nameText.gameObject);
	}


}



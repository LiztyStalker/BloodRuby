//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

public interface ICharacterInterface : IAction
{


	AddStateClass addState{get;}
//	ValueAddStateClass[] valueArray{get;}
	Transform transform{get;}
    //ICharacterInterface character { get; }
//    Vector3 position { get; }
    
	string playerName{get;}


	float angle { get; }
	float recoiling{get;}


	int nowHealth{ get;}
	int maxHealth{get;}

	int useAmmo{ get; set;}
	int maxAmmo{get;}

	float skillRunTime(int slot);
	float skillCoolTimeRate (int slot);
//	void resetSkillActionCoolTime (int slot);
	void resetSkillCoolTime(int slot, float rate = 1f);

	void setParticle (GameObject particleObj, Vector2 shootPos);

	TYPE_TEAM team{get;}
	TYPE_MOS mos{get;}
	Vector3 shootPos{get;}


	//가이드라인
	float skillAngle {get;}
	Vector3 skillPos{get;}
//	ICharacterInterface target{ get; }
	AutoTargetClass autoTarget{get;}
	ICharacterInterface getTarget (float angle, TYPE_TEAM team, bool isAlly, bool isMyself, bool isDead);
	UICharacterClass characterCtrler{get;}

	bool isDead{get;}
	string name{ get; }

	MOSDataClass mosData{ get; }


	SoundPlayClass soundPlayer{ get; }

    /// <summary>
    /// 거점 점령중
    /// </summary>
    /// <param name="flag">거점</param>
	/// <param name="isTeam">같은 팀 여부</param>
	void setMsg(string flagTag, CaptureObjectClass flag);

	/// <summary>
	/// 메시지 닫기
	/// </summary>
	//void closeMsg();

    /// <summary>
    /// 리포트 삽입 후 가져오기
    /// </summary>
    /// <param name="value"></param>
    /// <param name="typeReport"></param>
    /// <returns></returns>
    int addReport(int value, TYPE_MOS mos, TYPE_REPORT typeReport);

    /// <summary>
    /// 리포트 가져오기
    /// </summary>
    /// <param name="typeReport"></param>
    /// <returns></returns>
    int getReport(TYPE_MOS mos, TYPE_REPORT typeReport);
    int getReport(TYPE_REPORT typeReport);

	/// <summary>
	/// 게임 준비
	/// </summary>
	void gameReady (UICharacterClass parent, TYPE_MOS mos, int[] equipmentSlots);
	
	/// <summary>
	/// 게임 시작
	/// </summary>
	void gameStart ();
	
	/// <summary>
	/// 게임 입장
	/// </summary>
	void gameEnter ();
	
	/// <summary>
	/// 게임 퇴장
	/// </summary>
	void gameExit ();

	/// <summary>
	/// 게임 종료
	/// </summary>
	void gameEnd ();
	
	/// <summary>
	/// 재장전
	/// </summary>
	void reloadAction ();
	
	/// <summary>
	/// 공격
	/// </summary>
	void attackAction (float angle);


	/// <summary>
	/// 무기변경
	/// </summary>
	/// <returns>The change.</returns>
	/// <param name="weapon">변경되는 무기</param>
	/// <param name="bulletCount">탄환 개수</param>
	WeaponEquipmentClass weaponChange (WeaponEquipmentClass weapon, int bulletCount);

	/// <summary>
	/// 스켈레톤 애니메이션 설정
	/// </summary>
	/// <param name="skeletonAnimation">Skeleton animation.</param>
	void setSkeletonAnimation(MOSSkeletonClass MOSSkeleton);

	/// <summary>
	/// 바라보기
	/// </summary>
	/// <param name="angle">Angle.</param>
	void viewAction(float angle);

	/// <summary>
	/// 이동
	/// </summary>
	/// <param name="dirX">Dir x.</param>
	/// <param name="dirY">Dir y.</param>
	void moveAction(float dirX, float dirY);
	
	/// <summary>
	/// 스킬 발동
	/// </summary>
	/// <param name="slot">Slot.</param>
	void skillAction (int slot);

	/// <summary>
	/// 스킬 가이드라인 가져오기
	/// </summary>
	/// <param name="slot">Slot.</param>
	void skillGuideLine (int slot);

	/// <summary>
	/// 가이드라인 출력
	/// </summary>
	/// <param name="slot">Slot.</param>
	void setSkillGuideLine (SkillClass skillData);//, ICharacterInterface target);

	/// <summary>
	/// 스킬 가이드라인 끄기
	/// </summary>
	void closeSkillGuideLine();

	/// <summary>
	/// 사망
	/// </summary>
    void deadAction(IBullet bullet);    
	
	/// <summary>
	/// 부활
	/// </summary>
	void rebirthAction ();


	/// <summary>
	/// 버프 삽입
	/// </summary>
	/// <param name="buff">Buff.</param>
	/// <param name="ownerCharacter">버프 사용자.</param>
	/// <param name="actCharacter">버프 당하는자.</param>
	BuffDataClass buffAdd(BuffDataClass buffData, ICharacterInterface ownerCharacter, ICharacterInterface actCharacter);


	/// <summary>
	/// 버프 강제 종료
	/// </summary>
	/// <returns><c>true</c>, if end was buffed, <c>false</c> otherwise.</returns>
	/// <param name="buffData">Buff data.</param>
	bool buffEnd (BuffDataClass buffData);

	/// <summary>
	/// 버프 패널 종료
	/// </summary>
	/// <returns><c>true</c>, if end was buffed, <c>false</c> otherwise.</returns>
	/// <param name="buffData">Buff data.</param>
	bool buffEndPanel(BuffDataClass buffData);

	/// <summary>
	/// 체력 회복
	/// </summary>
	/// <param name="health">Health.</param>
	void addHealth(int healthPoint, ICharacterInterface ownerCharacter);

	/// <summary>
	/// 체력회복
	/// </summary>
	/// <param name="health">치유량</param>
	/// <param name="ownerCharacter">치유자.</param>
	bool useBuff(ICharacterInterface character, IBullet bullet, TYPE_BUFF_STATE_ACT buffStateAct);

	/// <summary>
	/// 버프 사용하기
	/// 공격시 버프
	/// </summary>
	/// <param name="character">Character.</param>
	bool useBuff(ICharacterInterface character, TYPE_BUFF_STATE_ACT buffStateAct);


	/// <summary>
	/// 아이템 습득
	/// </summary>
	/// <param name="itemObject">Item object.</param>
	void itemAction (ItemObjectClass itemObject);
}


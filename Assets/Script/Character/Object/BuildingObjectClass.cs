//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
public class BuildingObjectClass : ActionObjectClass
{

	//체력 0이하 무적, 1이상 체력 있음
	[SerializeField] int m_healthPoint;
//	[SerializeField] bool m_isCollider; //접근시 발동
	[SerializeField] bool m_isBroken = true;
	[SerializeField] bool m_isAuto; //자동
	[SerializeField] BoxCollider2D m_collider;
	[SerializeField] GameObject m_removeParticle;


	BuildingManagerBuffDataClass m_buildManager = null;

	int m_maxHealth;
	//이미지 틀
	protected CharacterFrameClass m_buildingFrame;
	public CharacterFrameClass buildingFrame{get{return m_buildingFrame;}}

	//상위 건물 데이터
	//상위에 건물이 있는지 알아보고 있으면 상위 건물 데이터 중심으로 행동
//	SetBuildingObjectClass m_parentBuilding;


	/// <summary>
	/// 설치자
	/// </summary>
//	protected ICharacterInterface m_owner;
	protected UICharacterClass m_characterCtrler;

	//버프
	protected SkillBuffClass m_skillBuffData = null;

	//사용 행동
	protected BuildingActionObjectClass m_buildingAction = null;


	public Rect rect{ 
		get { 
			if(m_collider != null)
				return new Rect(m_collider.offset, m_collider.size * m_collider.transform.localScale.x); 
			return Rect.zero;
		} 
	}
//	public Bounds bound{get{return m_collider.bounds;}}



	void Start(){

		m_buildingFrame = GetComponent<CharacterFrameClass> ();
		m_skillBuffData = GetComponent<SkillBuffClass> ();
		m_buildingAction = GetComponent<BuildingActionObjectClass> ();

		if (m_healthPoint <= 0)
			m_maxHealth = m_health = 1;
		else 
			m_maxHealth = m_health = m_healthPoint;

		if (m_isAuto) {
			m_buildingFrame.setColor (TYPE_TEAM.ENEMY);
			m_buildingAction.initAction (null, this, m_buildingFrame);
		}

		else if (m_characterCtrler != null) {
			if (m_buildingFrame != null)
				m_buildingFrame.setColor (m_characterCtrler.team);

			if (m_buildingAction != null)
				m_buildingAction.initAction (m_characterCtrler, this, m_buildingFrame);
		}
	}


	public void initWeaponSprite(Sprite weaponSprite){
		Debug.Log ("SetweaponSprite : " + weaponSprite);
		m_buildingAction = GetComponent<BuildingActionObjectClass> ();
		if(m_buildingAction != null) m_buildingAction.setWeaponSprite(weaponSprite);
	}

	/// <summary>
	/// 빌딩 초기화
	/// </summary>
	/// <param name="character">Character.</param>
	/// <param name="angle">Angle.</param>
	public void initBuilding(UICharacterClass characterCtrler, float angle, bool isBroken = true){
		m_isBroken = isBroken;
		setBuilding (characterCtrler);
		setAngle (angle);
	}


	void setAngle(float angle){
		m_buildingFrame = GetComponent<CharacterFrameClass> ();
		if (m_buildingFrame != null) {
			m_buildingFrame.setAngle (angle);
		} else {
			transform.eulerAngles = new Vector3 (0f, 0f, angle);
		}
	}

	/// <summary>
	/// 건물 설치
	/// </summary>
	/// <param name="character">Character.</param>
	void setBuilding (UICharacterClass characterCtrler)
	{
		m_characterCtrler = characterCtrler;
//		m_characterFrame = GetComponent<CharacterFrameClass> ();
		if (characterCtrler != null) {
//			m_characterFrame.setAngle (m_character.angle - 90f);
			m_team = characterCtrler.team;

		} else {
			m_team = TYPE_TEAM.NONE;
		}
	}
		
		

	//사용시 발동
	public override void useObject ()
	{
//		m_buildingAction
		if(m_buildingAction != null) m_buildingAction.useAction();

	}

	//파괴시 발동
	public override void removeObject (GameObject gameObj)
	{
//		m_buildingAction
		if(m_buildingAction != null) m_buildingAction.useAction();
		if (m_removeParticle != null) Instantiate (m_removeParticle, transform.position, new Quaternion ());
		if (m_buildManager != null) m_buildManager.removeBuilding (this);
//		Debug.LogWarning ("destroy");
		base.removeObject (gameObj);
	}


	//덤불, 철조망, 참호등 겹치면 발동
	//효과 더하기 - 같은 효과 중복시 무시
	//지뢰, 폭발
	void OnTriggerEnter2D(Collider2D col){
//		m_skillBuffData	

		//버프 삽입
		if (m_skillBuffData != null) {
			//캐릭터가 들어오면
			if (PrepClass.isCharacterTag (col.tag)) {
				col.GetComponent<ICharacterInterface> ().buffAdd (m_skillBuffData.getBuffData (), null, col.GetComponent<ICharacterInterface> ());
			}
		}
//		else if (m_buildingAction != null) {
//			if (PrepClass.isCharacterTag (col.tag)) {
//				if (col.GetComponent<ICharacterInterface> ().team != team) {
//					m_buildingAction.useAction ();
//					if(m_isBroken) removeObject (gameObject);
//				}
//			}
//		}
	}

	//덤불, 철조망, 참호등 나가면 발동
	//효과 빼기 - 버프 종료
	void OnTriggerExit2D(Collider2D col){
		//m_skillBuffData		

		if (m_skillBuffData != null) {
			if (PrepClass.isCharacterTag (col.tag)) {
				try{
					col.GetComponent<ICharacterInterface> ().addState.getBuff(m_skillBuffData.getBuffData ().GetType()).buffEnd();
				}
				catch{
				}

			}
		}
	}


	public override bool hitAction(TYPE_TEAM team, IBullet bullet){

		if (!m_isBroken)
			return false;

		if (m_team != team) {

			if (hitAction (bullet.damage)) {
				removeObject (gameObject);
				return true;
			}

			Debug.Log ("hp : " + m_health);

			if(m_maxHealth > 0) m_buildingFrame.setHPBar (m_health, m_maxHealth);

			if (bullet.isPenetrate)
				return false;
			return true;
		}
		//}
		return false;
	}


	/// <summary>
	/// 체력 회복
	/// </summary>
	/// <param name="health">Health.</param>
	public void addHealth(int health){
		addHealth (health, m_maxHealth);
		m_buildingFrame.setHPBar (m_health, m_maxHealth);
	}

	public void setBuildManager(BuildingManagerBuffDataClass buildManager){
		m_buildManager = buildManager;
	}

//	void OnDisable(){
//		if(m_removeParticle != null)
//			m_removeParticle
//	}

}




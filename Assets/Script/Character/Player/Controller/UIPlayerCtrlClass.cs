//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Events;
using UnityEngine.EventSystems;


public enum TYPE_CTRLER{NONE = -10, RELOAD = -1, SKILL0, SKILL1, SKILL2, SKILL3, TELESCOPE}

public class UIPlayerCtrlClass : MonoBehaviour
{

	const float c_smallBtnRate = 0.33f;
	const float c_midBtnRate = 0.5f;

	[SerializeField] PlayerClass m_playerClass;


	PlayerClass m_player;

	[SerializeField] UIJoystickClass m_moveJoystick;
	[SerializeField] UIJoystickClass m_viewJoystick;

	[SerializeField] UIEventPanelClass m_uiEventPanel;
	[SerializeField] UIBuffIconPanelClass m_buffIconPanel;
	[SerializeField] UIContentViewClass m_contentsView;


	[SerializeField] Slider m_healthBar;
	[SerializeField] Slider m_shieldBar;
	[SerializeField] Text m_healthText;
	[SerializeField] Image m_characterIcon;
	[SerializeField] UIWarningClass m_warningData;

	[SerializeField] Image m_weaponImage;
	[SerializeField] Slider m_ammoBar;

	//스킬버튼 묶음 - SkillDown 제어
	[SerializeField] UISkillBtnCtrlClass[] m_skillBtns;
	[SerializeField] UISkillBtnCtrlClass m_reloadBtn;
	[SerializeField] Button m_telescopeBtn;


	[SerializeField] Sprite m_onTelescopeSprite;
	[SerializeField] Sprite m_offTelescopeSprite;

	[SerializeField] Sprite m_reloadSprite;
	[SerializeField] Sprite m_cancelSprite;



	bool m_isSetEvent = false;
	bool m_isSkillCtrl = false;

	TYPE_CTRLER m_typeCtrler = TYPE_CTRLER.NONE;

	public PlayerClass player{ get { return m_player; } }

	public bool gameReady(UIPlayerClass parent, TYPE_MOS mos, int[] equipCnt, CaptureObjectClass flag){
		//배치 버튼 선택
		//해당 위치에 위 데이터에 맞는 캐릭터 생성
		if (flag != null) {
			m_typeCtrler = TYPE_CTRLER.NONE;
			m_player = (PlayerClass)Instantiate (m_playerClass, flag.respawnPos, new Quaternion ());
			//해당 거점 주변으로 이동
			//Debug.Log("mos : " + mos);
			m_player.gameReady (parent, mos, equipCnt);
			setPlayer ();
			initController ();
			//탄환이 0이면 재장전 버튼 없음

			return true;
		} else {
			Debug.Log("거점이 존재하지 않습니다.");
			//거점이 존재하지 않습니다.
			return false;
		}

	}


	void initController(){
	}


	/// <summary>
	/// 게임 데이터 업데이트
	/// </summary>
	/// <param name="ctrler">Ctrler.</param>
	public void gameUpdate(GameControllerClass ctrler){
		m_uiEventPanel.gameUpdate(ctrler);
		if (m_player != null) {
			m_player.isGameRun = ctrler.isGameRun;
			uiUpdate ();
		}
	}



	public void setPlayer(){
		//m_player = player;

		m_moveJoystick.setPlayer (m_player, m_viewJoystick);
		m_viewJoystick.setPlayer (m_player, m_moveJoystick);

		setEvents ();
	}

	void setEvents(){

		if (!m_isSetEvent) {


			for (int i = 0; i < m_skillBtns.Length; i++) {
				m_skillBtns [i].setParent (this);
			}


//			foreach (Button btn in m_skillBtns) {
//				btn.onClick.AddListener (() => skillBtnEvent ());
//			}
		
			m_telescopeBtn.onClick.AddListener (() => telescopeBtnEvent ());

			m_reloadBtn.setParent (this);
			m_reloadBtn.setDelegate (reloadBtnEvent);


			m_isSetEvent = true;
		
			m_uiEventPanel.setAim (false);

		
		}

		for (int i = 0; i < m_skillBtns.Length; i++) {
			m_skillBtns[i].setSkill (m_player.mosData.skillData[i]);
		}


		m_reloadBtn.gameObject.SetActive (m_player.mosData.weapon.isConsume);

		m_reloadBtn.setIcon (m_reloadSprite);


	}

//	void Awake(){
//		//setPlayer(GameObject.Find ("Game@Player").GetComponent<PlayerClass> ());
//	}

	void uiUpdate(){
//    IEnumerator uiUpdate(){

//        while (m_player != null)
//        {

//		Debug.Log ("sp : " + m_player.mosData.mosData.characterRound);


		if (m_player.mosData.mosData.characterRound != null)
			m_characterIcon.sprite = m_player.mosData.mosData.characterRound;
		else
			m_characterIcon.sprite = null;

		m_ammoBar.GetComponentInChildren<Text> ().text = string.Format("{0}/{1}", m_player.useAmmo, m_player.maxAmmo);


		if (m_player.addState.maxShield > 0) {
			m_healthText.text = string.Format("{0}/{1}", m_player.addState.nowShield, m_player.addState.maxShield);
			m_shieldBar.value = PrepClass.ratioCalculator ((float)m_player.addState.nowShield, (float)m_player.addState.maxShield);
		} else {
			m_healthText.text = string.Format("{0}/{1}",  m_player.nowHealth, m_player.maxHealth);
			m_shieldBar.value = PrepClass.ratioCalculator (0f, 1f);
		}

        m_ammoBar.value = PrepClass.ratioCalculator((float)m_player.useAmmo, (float)m_player.maxAmmo);
        m_healthBar.value = PrepClass.ratioCalculator((float)m_player.nowHealth, (float)m_player.maxHealth);
		m_warningData.setRate (1f - m_healthBar.value);


		if (m_player.mosData.weapon.equipIcon != null)
			m_weaponImage.sprite = m_player.mosData.weapon.equipIcon;
		else
			m_weaponImage.sprite = null;


        for (int i = 0; i < m_skillBtns.Length; i++)
        {

			m_skillBtns [i].skillCooltimeCalculate (m_player.skillCoolTimeRate(i), m_player.skillRunTime(i));

//                m_skillBtns[i].targetGraphic.GetComponent<Image>().fillAmount = m_player.skillCoolTimeRate(i);
//                if (m_player.skillRunTime(i) != 0f)
//                    m_skillBtns[i].GetComponentInChildren<Text>().text = string.Format("{0:f1}", m_player.skillRunTime(i));
//                else
//                    m_skillBtns[i].GetComponentInChildren<Text>().text = i.ToString() + "스킬";

        }

		//현재 버프 걸려있는 것 보여주기
		m_buffIconPanel.gameUpdate ();

            //yield return new WaitForSeconds(PrepClass.c_timeGap * 0.5f);
       // }

        
		//m_healthBar;
		//m_ammoBar;
	}

//	public void telescopeActive(){
//		m_telescopeBtn.gameObject.SetActive (true);
//	}
//
//	public void telescopeInactive(){
//		m_telescopeBtn.gameObject.SetActive (false);
//	}


	void telescopeBtnEvent(){
		Debug.Log ("망원경");

		//스킬버튼 제어중이면

		m_player.telescopeAction ();

//		망원경상태가 아니면
		if (!m_player.isTelescope) {

			//setTypeCtrler (TYPE_CTRLER.TELESCOPE);

			//망원경 on 스프라이트
			m_telescopeBtn.targetGraphic.GetComponent<Image> ().sprite = m_onTelescopeSprite;
			//공격버튼 보이기
			m_viewJoystick.gameObject.SetActive (true);

			//스킬 버튼 보이기
			foreach (UISkillBtnCtrlClass btnCtrl in m_skillBtns) {
				btnCtrl.gameObject.SetActive (true);
			}

			// 장전버튼 보이기 - 근거리이면 안보임
			if (m_player.mosData.weapon.typeRange == TYPE_RANGE.LONG)
				m_reloadBtn.gameObject.SetActive (true);
		} 
		//망원경 상태이면
		else {
			
			//망원경 off 스프라이트

			//resetTypeCtrler ();

			m_telescopeBtn.targetGraphic.GetComponent<Image> ().sprite = m_offTelescopeSprite;
			//저격수가 아니거나 웨폰체인지가 있으면
			if (m_player.mos != TYPE_MOS.SNIPER || m_player.addState.getBuff(typeof(WeaponChangeBuffDataClass)) != null){
				m_viewJoystick.gameObject.SetActive (false);

				//스킬 버튼 안보이기
				foreach (UISkillBtnCtrlClass btnCtrl in m_skillBtns) {
					btnCtrl.gameObject.SetActive (false);
				}

				//재장전버튼 안 보이기
				m_reloadBtn.gameObject.SetActive (false);

			}

		}

		if (m_player.addState.isConstraint(TYPE_CONSTRAINT.TELESCOPE_ATTACK)){
			setAim (m_player.isTelescope);

			//공격버튼 사라짐 - 저격수만 생성
		}
	}

	public void setAim(bool isTelescope){
		m_uiEventPanel.setAim (isTelescope);
	}

	void pauseBtnEvent(){
		Debug.Log ("일시정지");
		m_player.pauseAction ();
	}

//	void skillBtnEvent(){
//		if (EventSystem.current.currentSelectedGameObject != null) {
//			int slot = int.Parse(EventSystem.current.currentSelectedGameObject.name.Substring(0, 1));
//			m_player.skillAction(slot);
//			Debug.Log ("스킬사용 " + slot);
//		}
////		m_player.skillAction (slot);
//	}

	void reloadBtnEvent(){
		Debug.Log ("재장전");
		m_player.reloadAction ();
	}

	/// <summary>
	/// 버튼 대기 여부
	/// </summary>
	public bool isNoneTypeCtrler(){
		return (m_typeCtrler != TYPE_CTRLER.NONE);
	}

	/// <summary>
	/// 스킬 동기화 여부
	/// </summary>
	/// <returns><c>true</c>, if skill sync was ised, <c>false</c> otherwise.</returns>
	public bool isTypeCtrler(TYPE_CTRLER typeCtrler){
		return (typeCtrler == m_typeCtrler);
	}

	/// <summary>
	/// 스킬 제어 등록
	/// </summary>
	public void setTypeCtrler(TYPE_CTRLER typeCtrler){
		m_typeCtrler = typeCtrler;
	}


	/// <summary>
	/// 스킬 제어 닫기
	/// </summary>
	public void resetTypeCtrler(){
		m_typeCtrler = TYPE_CTRLER.NONE;
	}

	public void cancelBtnEvent(bool isCancel){


		if (isCancel) {
			if (!m_reloadBtn.isActiveAndEnabled) {		//취소 버튼으로 변경
				m_reloadBtn.gameObject.SetActive (true);

				//망원경 버튼 사라짐
			}
			m_telescopeBtn.gameObject.SetActive (false);
			m_reloadBtn.setIcon (m_cancelSprite);
		}
		else {
			//망원경 버튼 활성화
			m_telescopeBtn.gameObject.SetActive (true);
			//취소 버튼 해제
			m_reloadBtn.gameObject.SetActive (m_player.mosData.weapon.isConsume);
			m_reloadBtn.setIcon (m_reloadSprite);
		}
// 
//		if (isCancel) {
//			m_reloadBtn.GetComponentInChildren<Text> ().text = "X";
//		} else {
//			m_reloadBtn.GetComponentInChildren<Text> ().text = "Re";
//		}

	}


	public BuffDataClass buffAdd(BuffDataClass buffData){
		return m_buffIconPanel.buffAdd (buffData, this);
	}

	public bool buffEnd(BuffDataClass buffData){
		return m_buffIconPanel.buffEnd (buffData);
	}

	public bool buffAllEnd(){
		return m_buffIconPanel.buffAllEnd ();
	}

	public void setContentsView(IContentView contentsView, Vector2 pos){
		m_contentsView.setContentView (contentsView, pos);
	}


	void OnDisable(){
		if (m_contentsView.isActiveAndEnabled)
			m_contentsView.closeContentView ();
	}





}



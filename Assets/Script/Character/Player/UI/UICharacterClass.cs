//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
public abstract class UICharacterClass : MonoBehaviour
{


	[SerializeField] TYPE_TEAM m_team;
	[SerializeField] BuffDataClass m_respawnInvisibleBuff;

    GameReportClass m_gameReport = new GameReportClass();
	protected string m_nickname;
	protected Sprite m_icon;
	protected int m_level = 1;

    protected GameControllerClass m_ctrler;
	protected const float m_respawnTimeMax = 5f;
	protected float m_respawnTime = 0f;

	public Sprite icon{ get { return m_icon; } }
	public string nickname{ get { return m_nickname; } }
	public int level{get{return m_level;}}
	public TYPE_TEAM team{ get { return m_team; } set{ m_team = value; }}
    protected GameReportClass report { get { return m_gameReport; } }
	protected BuffDataClass respawnInvisibleBuff{ get { return m_respawnInvisibleBuff; } }
	public abstract ICharacterInterface character{ get; }

	public abstract void gameStart ();
	public abstract void gameUpdate(GameControllerClass ctrler);
	public abstract void gameRestart ();
	public abstract void gameReady(TYPE_MOS mos, int[] equipments, CaptureObjectClass flag);
	public abstract void gameHistory(GameControllerClass ctrler);
	public abstract void closeMsg ();
	public virtual void gameEnd (TYPE_GAMEEND endType){	addReport (endType);}
	public virtual BuffDataClass buffAdd(BuffDataClass buffData){return buffData;}
	public virtual bool buffEnd(BuffDataClass buffData){return false;}
	public virtual bool buffAllEnd (){return false;}
	public virtual void closeCastingMsg (){}

	public virtual void setMsg (string flagTag, CaptureObjectClass flag = null){}
	public virtual void setMsg (GameControllerClass gameCtrler){}
	public virtual void setMsg (CastingParticleBuffDataClass castingBuff = null){}
	public virtual void setMsg (SkillClass skillData, bool isLoop){}
	public virtual void setMsg(TYPE_SKILL_POS skillPos, bool isAlly){}


    /// <summary>
    /// 리포트 설정 후 가져오기
    /// </summary>
    /// <param name="value">값</param>
    /// <param name="typeReport">타입</param>
    /// <returns></returns>
    public int addReport(int value, TYPE_MOS mos, TYPE_REPORT typeReport) { return m_gameReport.addReport(value, mos, typeReport); }
	public int addReport(TYPE_GAMEEND typeGameEnd) { return m_gameReport.addReport(typeGameEnd); }


    /// <summary>
    /// 리포트 가져오기
    /// </summary>
    /// <param name="typeReport">타입</param>
    /// <returns></returns>
    public int getReport(TYPE_MOS mos, TYPE_REPORT typeReport) { return m_gameReport.getReport(mos, typeReport); }
    public int getReport(TYPE_REPORT typeReport) { return m_gameReport.getReport(typeReport); }


    /// <summary>
    /// 사망 후 리스폰
    /// </summary>
    /// <param name="character">피해자</param>
    /// <param name="inflictCharacter">가해자</param>
    /// <param name="type">가한 원인</param>
	public virtual void gameRespawn(UICharacterClass inflictCharacter, IBullet bullet)
    {
        //character가 inflictCharacter에게 type에 의해 사망

        //character
		if(inflictCharacter != null)
			inflictCharacter.addReport(1, inflictCharacter.character.mos, TYPE_REPORT.KILL);
        
		//피해자에 어시스트 데이터가 있으면 모든 어시스트 데이터에 삽입
		if(character != null)
	        m_gameReport.addReport(1, character.mos, TYPE_REPORT.DEAD);
		
        m_ctrler.ticketScore[(int)team]--;


		m_respawnTime = -m_respawnTimeMax;
		//리스폰시간끝나면없어짐


//		킬, 데스 방송
		Debug.LogWarning("Ctrler " + m_ctrler + " - broadcast : " + character + " " + inflictCharacter + " " + bullet);

		if(inflictCharacter == null)
			m_ctrler.broadcastKillDeathMsg(character, null, bullet);
		else
			m_ctrler.broadcastKillDeathMsg(character, inflictCharacter.character, bullet);



    }

	public virtual void gameRebirth(ICharacterInterface act_character){
		//부활당함
		//m_gameReport.addReport(1, act_character.mos, TYPE_REPORT.REB_GET);
		m_respawnTime = 0f;
	}

	/// <summary>
	/// 닉네임 삽입
	/// </summary>
	/// <param name="name">Name.</param>
	public void setNickname(string name){
		m_nickname = name;
	}

	public virtual void broadcastKillDeathMsg (ICharacterInterface deathCharacter, ICharacterInterface inflictCharacter, IBullet bullet){}

}



//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using UnityEngine.UI;
public class UIMinimapFlagClass : MonoBehaviour
{
	string m_name;
	[SerializeField] Text m_text;
	[SerializeField] Image m_nowImage;
	[SerializeField] Image m_nextImage;
    Vector2 m_scale = Vector2.zero;


    const float c_flagAdd = 0.05f;

    float m_size = 1f;
    bool m_rev = false;

	/// <summary>
	/// 거점 초기화 하기
	/// </summary>
	/// <param name="name">Name.</param>
	/// <param name="tag">Tag.</param>
	public void setCaptureName(string name, string flagTag){
		m_name = name;
        m_text.text = flagTag;
	}

	/// <summary>
	/// 토글 버튼 가져오기
	/// </summary>
	/// <value>The toggle.</value>
	public Toggle toggle{ get { return GetComponent<Toggle> (); } }

	/// <summary>
	/// 토글깃발 새로고침
	/// </summary>
	/// <param name="flag">Flag.</param>
	/// <param name="team">Team.</param>
	public void setFlagView(CaptureObjectClass flag, TYPE_TEAM nowteam){



		//토글깃발
		//거점팀 - 현재 거점을 가지고 있는 팀 - 깃발
		//점령팀 - 현재 거점을 점령하려하는 팀 - 없을시 중립 - 깃발


		//거점점수 - 현재 거점이 점령팀이면 점령팀 거점점수, 중립이면 현재 거점을 점령하려는 팀 점수


		//다른팀 깃발이면 사용 불가
		if (nowteam != flag.team) {
			toggle.isOn = toggle.interactable = false;
        }
		//같은 팀 깃발이면 사용 가능
		else{
			toggle.interactable = true;
		}

		//중립이면 nextImage 색이 다음 팀 색으로 변경
		//팀 색이면 nextImage색이 중립 팀 색으로 변경
		//거점 점령이 완료되면 next데이터가 now데이터로 이동

		if(flag.team == TYPE_TEAM.NONE)
			flagSet (flag.team, flag.capteam, PrepClass.ratioCalculator(flag.flagScore(flag.capteam), 100));
		else
			flagSet (flag.team, flag.capteam, PrepClass.ratioCalculator(flag.flagScore(flag.team), 100));

	}

	
	
	/// <summary>
	/// 토글깃발 색 변경
	/// </summary>
	/// <param name="nowteam">Nowteam.</param>
	/// <param name="capteam">Capteam.</param>
	/// <param name="rate">Rate.</param>
	void flagSet(TYPE_TEAM nowteam, TYPE_TEAM capteam = TYPE_TEAM.NONE, float rate = 1f){
		//거점이 중립이면

		//중립이면 next의 색이 점령팀 색으로 변환 후 0~1로 이동
		//거점 점령이면 next의 색은 그대로 두고 1~0으로 이동 


		//m_nextImage.fillAmount = rate;

		m_nowImage.fillAmount = 1f;
		//m_nowImage.color = PrepClass.getFlagColor(team);
		if (nowteam == TYPE_TEAM.NONE) {
			//중립색 가져오기
			//점령팀 가져오기
			m_nextImage.color = PrepClass.getFlagColor(capteam);
			m_text.color = Color.white;

			//비율 가져오기
			m_nextImage.fillAmount = rate;

		}
		//거점이 점령되어있으면
		else {

			//중립거점
			m_nextImage.color = PrepClass.getFlagColor(nowteam);
			m_text.color = Color.black; //m_nextImage.color;
			//비율
			m_nextImage.fillAmount = rate;

		}

        flagBlink(rate);

	}


    /// <summary>
    /// 깃발 깜빡거림
    /// </summary>
    /// <param name="rate"></param>
    void flagBlink(float rate)
    {




        if (rate < 1f && rate > 0f)
        {


//            Debug.Log("toggle : " + toggle.isOn);

            if (m_rev)
            {
                m_size -= c_flagAdd;
                if (m_size < 0.95f)
                    m_rev = !m_rev;
            }
            else
            {
                m_size += c_flagAdd;
                if (m_size > 1.05f)
                    m_rev = !m_rev;
            }
        }
        else
        {
            m_size = 1f;
        }

        m_scale.Set(m_size, m_size);
        transform.GetComponent<RectTransform>().localScale = m_scale;
    }
   

}




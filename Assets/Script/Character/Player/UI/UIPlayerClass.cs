//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;
using UnityEngine.SceneManagement;

public class UIPlayerClass : UICharacterClass
{
//	[SerializeField] PlayerClass m_player;
	[SerializeField] UIReadyPanelClass m_readyPanel;
	[SerializeField] UIPlayerCtrlClass m_ctrlPanel;
	[SerializeField] UIPlayMsgClass m_playerMsgPanel;
	[SerializeField] UIRespawnClass m_respawnPanel;
	[SerializeField] UIGameEndClass m_gameEndPanel;
	[SerializeField] UIGameFinishClass m_finishPanel; //전적 패널

	//[SerializeField] UIGameEndClass m_resultPanel; //결과값 패널
//	[SerializeField] bool m_isCpu = false; //컴퓨터 여부 true = 컴퓨터

	//사망
	//리스폰
	//미니맵
	//전투 결과
	//메시지 패널
	//...
	public override ICharacterInterface character {	get {return m_ctrlPanel.player;}}


	void Start(){gameStart ();}

	//가장 처음 - 준비패널 활성화

	/// <summary>
	/// 게임 시작
	/// </summary>
	public override void gameStart(){
		//준비 패널 켜짐		

		gameEnter();
		m_nickname = AccountClass.GetInstance.accountReport.name;
		m_icon = AccountClass.GetInstance.accountReport.icon;

		m_readyPanel.setParent (this);
		m_respawnPanel.setParent (this);
		gameRestart ();
	}


	/// <summary>
	/// 게임 컨트롤러 업데이트
	/// </summary>
	/// <param name="ctrler">Ctrler.</param>
	public override void gameUpdate(GameControllerClass ctrler){

        m_ctrler = ctrler;

		//리스폰 도중
		if (m_respawnTime < 0f) {
			m_respawnTime += PrepClass.c_timeGap;
			m_respawnPanel.gameUpdate (m_respawnTime + m_respawnTimeMax, m_respawnTimeMax);
			if (m_respawnTime > 0f) {
				
				//리스폰 타임 초기화
				m_respawnTime = 0f;

				//행동 오브젝트 파괴
				if(m_ctrlPanel.player != null) Destroy (m_ctrlPanel.player.gameObject);
			}
		} 
		//게임중
		else {
			if(m_readyPanel.isActiveAndEnabled)
				m_readyPanel.gameUpdate (ctrler, team);
			if (m_ctrlPanel.isActiveAndEnabled)
				m_ctrlPanel.gameUpdate(ctrler);

		}

		//게임 준비
		//게임 종료

	}

	/// <summary>
	/// 게임 재시작
	/// </summary>
	public override void gameRestart(){
		m_ctrlPanel.gameObject.SetActive (false);
		m_respawnPanel.gameObject.SetActive (false);
		m_readyPanel.gameObject.SetActive (true);
		buffAllEnd ();
	}

	/// <summary>
	/// 게임 준비
	/// </summary>
	/// <param name="mos">Mos.</param>
	/// <param name="equipments">Equipments.</param>
	/// <param name="flag">Flag.</param>
	public override void gameReady(TYPE_MOS mos, int[] equipments, CaptureObjectClass flag){
		if (m_ctrlPanel.gameReady (this, mos, equipments, flag)) {
			m_readyPanel.gameObject.SetActive (false);
			m_respawnPanel.gameObject.SetActive (false);
			m_ctrlPanel.gameObject.SetActive (true);

			m_ctrlPanel.player.buffAdd (respawnInvisibleBuff, m_ctrlPanel.player, m_ctrlPanel.player);
			m_ctrlPanel.player.setCamera(m_ctrler.mapData.maxRect, m_ctrler.mapData.maxTelescopeRect);

			//게임이 시작되었으면
			if (m_ctrler.isGameRun) report.startTime (m_ctrler.time);
			//게임이 준비중이면
			else report.startTime (m_ctrler.maxTime);
		}
		else{
			//거점 없음 - 아예없음
			//거점을 선택하지 않음
			if(m_readyPanel.getFlagCount(team) > 0)
				notFlagMsgEvent("거점을 선택하지 않았습니다.");
			else
				notFlagMsgEvent("거점이 존재하지 않습니다.");
		}
	}

	/// <summary>
	/// 사망 후 리스폰
	/// </summary>
	/// <param name="character">피해자</param>
	/// <param name="inflictCharacter">가해자</param>
	/// <param name="type">가한 원인</param>
	public override void gameRespawn(UICharacterClass inflictCharacter, IBullet bullet)
    {
		base.gameRespawn(inflictCharacter, bullet);

		m_respawnPanel.setRespawnView (inflictCharacter, bullet);
		m_readyPanel.gameObject.SetActive (false);
		m_ctrlPanel.gameObject.SetActive (false);

		//플레이타임 기록
		report.endTime (m_ctrlPanel.player.mos,  m_ctrler.time);

	}

	public override void gameRebirth (ICharacterInterface act_character)
	{
		base.gameRebirth (act_character);

		m_respawnPanel.gameObject.SetActive (false);
		m_readyPanel.gameObject.SetActive (false);
		m_ctrlPanel.gameObject.SetActive (true);

		//플레이타임 재시작
		report.startTime (m_ctrler.time);
	}

	/// <summary>
	/// 게임 종료
	/// </summary>
	/// <param name="gameend">Gameend.</param>
	public override void gameEnd (TYPE_GAMEEND endType){
		base.gameEnd (endType);
		m_respawnPanel.gameObject.SetActive (false);
		m_readyPanel.gameObject.SetActive (false);
		m_ctrlPanel.gameObject.SetActive (false);
		m_gameEndPanel.gameEnd(endType);

		if(m_ctrlPanel.player != null) report.endTime (m_ctrlPanel.player.mos, m_ctrler.time);
	}

	/// <summary>
	/// 게임 결과
	/// </summary>
	/// <param name="ctrler">Ctrler.</param>
	public override void gameHistory (GameControllerClass ctrler)
	{
        if (!m_finishPanel.isActiveAndEnabled)
        {
            m_finishPanel.gameObject.SetActive(true);
            m_finishPanel.setReport(report);
        }

        m_finishPanel.gameUpdate(ctrler);
	}

    /// <summary>
	/// UI 메시지 열기
    /// </summary>
    /// <param name="msg">메시지 설명</param>
    /// <param name="flag">깃발</param>
	public override void setMsg(string flagTag, CaptureObjectClass flag = null)
    {
		if (m_playerMsgPanel.isActiveAndEnabled)
		{
			if (flag == null)
				m_playerMsgPanel.setMsgAlarm (flagTag);
			else {
				if(flag.team != team)
					m_playerMsgPanel.setMsgFlag (flagTag + " 거점 점령중", flag);
				else
					m_playerMsgPanel.setMsgFlag ("", flag);
			}
        }
    }

	public override void setMsg (GameControllerClass gameCtrler)
	{
		if (m_playerMsgPanel.isActiveAndEnabled) {
			if(!gameCtrler.isGameRun)
				m_playerMsgPanel.setMsgAlarm ("게임 준비 " + gameCtrler.time);
			else
				m_playerMsgPanel.setMsgAlarm ("전투 시작!");

		}
	}

	/// <summary>
	/// 캐스팅 메시지 열기
	/// </summary>
	/// <param name="msg">Message.</param>
	/// <param name="castingBuff">Casting buff.</param>
	public override void setMsg(CastingParticleBuffDataClass castingBuff = null){
		/// 
//		Debug.Log("setCasting");
		if (m_playerMsgPanel.isActiveAndEnabled)
		{
//			Debug.Log("setCasting");
			if (castingBuff != null) {
				if (castingBuff.maxTime - castingBuff.runTime > 0f) {
					m_playerMsgPanel.setCastMassage (string.Format ("시전중 : {0:F1}", castingBuff.maxTime - castingBuff.runTime), castingBuff);
					return;
				}
			}
			m_playerMsgPanel.setCastMassage ("", false);
		}
	}

	public override void setMsg(TYPE_SKILL_POS skillPos, bool isAlly){
		if (m_playerMsgPanel.isActiveAndEnabled)
		{
			switch (skillPos) {
			case TYPE_SKILL_POS.AREA_TARGET:
				m_playerMsgPanel.setCastMassage ("범위를 지정하세요", true);
				break;
			case TYPE_SKILL_POS.TARGET:
				if(isAlly)
					m_playerMsgPanel.setCastMassage ("아군을 지정하세요", true);
				else
					m_playerMsgPanel.setCastMassage ("적을 지정하세요", true);
				break;
			case TYPE_SKILL_POS.ARROW:
				m_playerMsgPanel.setCastMassage ("방향을 지정하세요", true);
				break;
			case TYPE_SKILL_POS.BUILD:
				m_playerMsgPanel.setCastMassage ("설치할 곳을 지정하세요", true);
				break;
			case TYPE_SKILL_POS.AREA_SELF:
				if(isAlly)
					m_playerMsgPanel.setCastMassage ("범위 내의 아군에게 발동됩니다", true);
				else
					m_playerMsgPanel.setCastMassage ("범위 내의 적군에게 발동됩니다", true);
				break;
			}
		}
	}


	/// <summary>
	/// 캐스팅 메시지 열기
	/// </summary>
	/// <param name="msg">Message.</param>
	/// <param name="castingBuff">Casting buff.</param>
	public override void setMsg(SkillClass skillData, bool isLoop = false){
		if (m_playerMsgPanel.isActiveAndEnabled)
		{
			m_playerMsgPanel.setCastMassage ("사용할 수 없습니다.", isLoop);
		}
	}

	/// <summary>
	/// Closes the casting message.
	/// </summary>
	public override void closeCastingMsg(){
		if (m_playerMsgPanel.isActiveAndEnabled)
			m_playerMsgPanel.closeCastingMassage ();
	}

	/// <summary>
	/// UI 메시지 닫기
	/// </summary>
	public override void closeMsg (){m_playerMsgPanel.closeMsgFlag ();}


	public override BuffDataClass buffAdd(BuffDataClass buffData){
		if(buffData != null && buffData.isIconView)
			return m_ctrlPanel.buffAdd (buffData);
		return null;
	}

	public override bool buffEnd(BuffDataClass buffData){
		if(buffData != null && buffData.isIconView)
			return m_ctrlPanel.buffEnd (buffData);
		return false;
	}

	public override bool buffAllEnd (){
		return m_ctrlPanel.buffAllEnd ();
	}


	/// <summary>
	/// 게임 입장
	/// </summary>
	void gameEnter(){
		GameControllerClass ctrler = GameObject.Find ("Game@Controller").GetComponent<GameControllerClass>();
		ctrler.gameEnter (this);
	}

	/// <summary>
	/// 게임 퇴장
	/// </summary>
	void gameExit(){
		GameControllerClass ctrler = GameObject.Find ("Game@Controller").GetComponent<GameControllerClass>();
		ctrler.gameExit (this);
	}

	public void setAim(bool isTelescope){m_ctrlPanel.setAim (isTelescope);}

	public void lobbyBtnClickEvent(){
		GetComponent<UILobbyClass>().msgPanel.initMsgPanel("로비로 돌아가시겠습니까?", lobbyBtnClick, TYPE_MSG_SIGN.OKCANCEL, TYPE_MSG_ICON.WARNING);
	}

	void notFlagMsgEvent(string msg){
		GetComponent<UILobbyClass>().msgPanel.initMsgPanel(msg, TYPE_MSG_ICON.WARNING);
	}

	void lobbyBtnClick(){
		AccountClass.GetInstance.playPanel.nextPanel = PrepClass.c_LobbyPanelScene;
		SceneManager.LoadScene(PrepClass.c_LoadPanelScene);
	}

	public void pauseBtnClickEvent(){
		GetComponent<UILobbyClass>().msgPanel.initMsgPanel("로비로 돌아가시겠습니까?", pauseBtnClick, cancelBtnClick, TYPE_MSG_SIGN.OKCANCEL, TYPE_MSG_ICON.WARNING);
		Time.timeScale = 0f;
	}

	void pauseBtnClick(){lobbyBtnClick ();}

	void cancelBtnClick(){Time.timeScale = 1f;}

	public override void broadcastKillDeathMsg (ICharacterInterface deathCharacter, ICharacterInterface inflictCharacter, IBullet bullet){
		m_playerMsgPanel.broadcastKillDeathMsg(deathCharacter, inflictCharacter, bullet);		
	}

}



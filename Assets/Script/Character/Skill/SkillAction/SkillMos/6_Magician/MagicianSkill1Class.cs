//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
public class MagicianSkill1Class : SkillClass, ISkillMOSInterface
{

//	[SerializeField] ParticleSystem m_particle;
	[SerializeField] float m_movement;


	Vector3 m_pastPos = Vector2.zero;
	Vector2 m_moveVector = Vector2.zero;

	float m_range;

	public override bool skillAction(ICharacterInterface player){
		//런지 이동 후 이동한 거리 공격
		//이동

		setParticle (player.transform.position);

		//장외로 넘어가면 안되니 예외조건 필요
		m_pastPos = new Vector3(player.transform.position.x, player.transform.position.y);
		if (player.GetType () == typeof(CPUClass)) {
			((CPUClass)player).targetRotate ();
			m_moveVector = PrepClass.movementCalculator (m_movement, player.angle);
		} else {
			m_moveVector = PrepClass.movementCalculator (m_movement, player.skillAngle);
		}
		m_moveVector.Set (m_moveVector.x + player.transform.position.x, m_moveVector.y + player.transform.position.y);
		//player.transform.position = m_moveVector;

		RaycastHit2D[] rayHits = Physics2D.LinecastAll  (m_pastPos, m_moveVector);
		bool isChk = false;

		foreach (RaycastHit2D rayHit in rayHits) {
			Debug.Log ("pos : " + rayHit.collider.tag + " " + rayHit.centroid);
			if (PrepClass.isCharacterTag (rayHit.collider.tag))
				continue;
			else if (rayHit.collider.tag == "Wall" || rayHit.collider.tag == "ActObject") {
				Vector2 centroid = PrepClass.movementCalculator (0.1f, PrepClass.reverseAngleCalculator(player.skillAngle));
				centroid.Set (centroid.x + rayHit.centroid.x, centroid.y + rayHit.centroid.y);
				m_range = Vector2.Distance (m_pastPos, centroid) * 0.5f;
				player.transform.position = centroid;
				isChk = true;
				break;
			} 

		}

		if (!isChk) {
			m_range = Vector2.Distance (m_pastPos, m_moveVector) * 0.5f;
			if (player.GetType () == typeof(CPUClass))
				((CPUClass)player).warpPosition (m_moveVector);
			else
				player.transform.position = m_moveVector;
		}

		setParticle (player.transform.position);

		return base.skillAction (player);

	}

	public override void skillGuideLine(ICharacterInterface player){

		player.setSkillGuideLine (this);//, null);


	}

}



//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;
using System.Linq;

public enum TYPE_MODE{
	TOTALWAR, //전면전
	SIEGE, //공방전
	CAPTURE, //점령전
	BASE_ATTACK, //공격전
	BASE_DEFENCE, //방어전
	TRAINING //훈련맵
}

public class MapDataClass : MonoBehaviour
{


//	[SerializeField] string m_name; //맵 이름
    [SerializeField] string m_key; //맵 키
    [SerializeField] TYPE_MODE m_mode; //가능한 맵모드
	[SerializeField] string m_contents; //설명
	[SerializeField] Sprite m_minimapSprite; //맵 스프라이트
	[SerializeField] int m_ticket; //티켓 수량
    [SerializeField] Transform m_point; //포인터
	[Range(4, 8)]
    [SerializeField] int m_maxPopulation; //최대 인구
//	[SerializeField] AudioClip m_bgmAudio; //배경음
	[SerializeField] Vector2 m_maxRect;
	[SerializeField] Vector2 m_maxTelescopeRect;
	[SerializeField] bool m_isSelect = true;
    //[SerializeField] NavMesh m_navmesh; //메쉬


	//맵 초기화
	//전투 모드
    List<CaptureObjectClass> m_flags = new List<CaptureObjectClass>();
	PointerManagerClass m_pointerManager;




//    List<Transform> m_pointers = new List<Transform>(); //위치 포인터 그룹
	//미니맵
	//큰 맵과 작은 맵의 사이즈만큼 깃발 위치 생성


//	public string mapName{get{return m_name;}}
    public string mapKey { get { return m_key; } }
    public TYPE_MODE mode { get { return m_mode; } }
	public Sprite minimapSprite{ get { return m_minimapSprite; } }
	public string contents{get{return m_contents;}}
	public CaptureObjectClass[] flags{ get { return (CaptureObjectClass[])m_flags.ToArray(); } }
	public int ticket{ get { return m_ticket; } }
//    public Transform pointer { get { return m_pointers[UnityEngine.Random.Range(0, m_pointers.Count)]; } }
    public int maxPopulation { get { return m_maxPopulation; } }
	public Vector2 maxRect{get{return m_maxRect;}}
	public Vector2 maxTelescopeRect{get{return m_maxTelescopeRect;}}
	public bool isSelect{get{return m_isSelect;}}
    //public NavMesh navmesh { get { return m_navmesh; } }




	/// <summary>
	/// 티켓 개수 가져오기
	/// </summary>
	/// <returns>The tecket.</returns>
	/// <param name="team">Team.</param>
	public int getTecket(TYPE_TEAM team){
		int data = m_flags.Count<CaptureObjectClass> (flagData => flagData.team == team);
//		Debug.Log (data);
		return data;
	}

	public Transform getPoint(Transform transform){
		return m_pointerManager.getPoint (transform);
	}

	void Awake(){
		m_flags.AddRange(GetComponentsInChildren<CaptureObjectClass> ().ToList<CaptureObjectClass>());
		List<Transform> pointers = m_point.GetComponentsInChildren<Transform>().ToList<Transform>();


        int i = 0;
        foreach (CaptureObjectClass flag in m_flags)
        {
            if (!flag.isCaptured) flag.flagTag = "-";
            else flag.flagTag = ((char)('A' + i++)).ToString();

			pointers.Add(flag.gameObject.transform);
        }


		m_pointerManager = new PointerManagerClass (pointers);

		//게임 오브젝트에 깃발개수와 색상 보내기

		GetComponent<SoundPlayClass> ().audioPlay (TYPE_SOUND.BGM);

	}





}



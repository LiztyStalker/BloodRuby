//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.36373
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using Spine.Unity;
using System.Globalization;

public enum TYPE_MOS {DUALIST, GUARDIAN, FIREBAT, ASSAULT, HEAVY, SNIPER, MAGICIAN, CLERIC, BUILDER};

public enum TYPE_ANIMATION{
	IDLE, 
	MOVE, 
	ATTACK, 
	HIT, 
	DEAD, 
	TELESCOPE, 
	RELOAD, 
	SKILL0, 
	SKILL1, 
	SKILL2, 
	SKILL3, 
	RIDE
}

public class MOSClass : MonoBehaviour, IMOSPrototypeInterface, ICloneable
{

	[SerializeField] TYPE_MOS m_mos;
	[SerializeField] int m_health;
	[SerializeField] float m_speed;

	//[SerializeField] GameObject m_weapon;
	[SerializeField] Sprite m_character;
	[SerializeField] Sprite m_characterRound;
	[SerializeField] Sprite m_illustrator;
	//아이콘
	//이미지
	//스킬

	[SerializeField] SkillClass[] m_skillActions;
	[SerializeField] MOSSkeletonClass m_MOSSkeleton;


//	[SerializeField] string[] m_weaponAnimationKey;
//	[SerializeField] string[] m_animationActionKey;
	[SerializeField] string m_contents;


	TextInfo ti = CultureInfo.CurrentCulture.TextInfo;


	public TYPE_MOS mos { get { return m_mos; } }
	public int health{ get { return m_health; } }
	public float speed{ get { return m_speed; } }
	public Sprite character{ get { return m_character; } }
	public Sprite characterRound{ get { return m_characterRound; } }
	public Sprite illustrator{ get { return m_illustrator; } }
	public SkillClass[] skillActions{ get { return m_skillActions; } }
	public MOSSkeletonClass MOSSkeleton{ get {return m_MOSSkeleton; } }
	public string contents{ get { return m_contents; } }

//	public MOSClass(TYPE_MOS mos, int health, float speed){
//		m_mos = mos;
//		m_health = health;
//		m_speed = speed;
//	}

//	void initKey(){
//	}


	public object Clone(){
		object obj = (object)this.MemberwiseClone ();
		Debug.Log(((MOSClass)obj).character.name);
		//initKey ();
		return obj;
	}

	/// <summary>
	/// 애니메이션 키 가져오기
	/// </summary>
	/// <returns>The animation key.</returns>
	/// <param name="typeAnimation">Type animation.</param>
	public string getAnimationKey(TYPE_ANIMATION typeAnimation){
		return ti.ToTitleCase(typeAnimation.ToString ().ToLower());
	}

	/// <summary>
	/// 애니메이션 키 가져오기
	/// </summary>
	/// <returns>The animation key.</returns>
	/// <param name="typeAnimation">Type animation.</param>
//	public string getWeaponKey(string weaponkey){
//		if (m_weaponAnimationKey.Length == 0 || m_weaponAnimationKey.Length <= weaponSlot)
//			return "";
//		return m_weaponAnimationKey [weaponSlot];
//	}







}


